class Solution {
    public int longestSubstring(String s, int k) {
		int[] count = new int[26];
		int n = s.length();
		for (int i = 0; i < n; i++) {
			count[s.charAt(i) - 'a']++;
		}
		int start = 0;
		int i = 0;
		int maxLen = 0;
		boolean isContinuous = true;
		while(i < n) {
			if (count[s.charAt(i)-'a'] < k) {
				isContinuous = false;
				int subRes = longestSubstring(s.substring(start, i), k);
				maxLen = Math.max(subRes, maxLen);
				while (i < n && count[s.charAt(i) -'a'] < k) {
					i++;
				}
				start = i;
			} else {
				i++;
			}
		}

		if (isContinuous) {
			maxLen = i - start;
		} else {
			maxLen = Math.max(maxLen, longestSubstring(s.substring(start, i), k));
		}

		return maxLen;        
    }
}
