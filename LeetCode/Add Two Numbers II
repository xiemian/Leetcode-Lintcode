/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int getLength(ListNode ll){
        int len = 0;
        while(ll != null){
            len++;
            ll = ll.next;
        }
        return len;
    }
    
    public ListNode build(ListNode ll, int index){
        if(index == 0) return ll;
        ListNode newll = new ListNode(0);
        newll.next = build(ll,index-1);
        return newll;
    }
    
    public int addNumber(ListNode l1, ListNode l2){
        if(l1 == null) return 0;
        l1.val = l1.val + l2.val + addNumber(l1.next, l2.next);
        if(l1.val > 9){
            l1.val = l1.val % 10;
            return 1;
        }else return 0;
    }
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int len1 = getLength(l1), len2 = getLength(l2);
        int maxLen = Math.max(len1,len2), minLen = Math.min(len1,len2);
        if(len2 > len1){
            ListNode tmp = l2;l2 = l1;l1 = tmp;
        }
        int sub = maxLen - minLen;
        ListNode newl2 = build(l2,sub);
        int flag = addNumber(l1,newl2);
        ListNode head;
        if(flag == 1){
            head = new ListNode(1);
            head.next = l1;
        }else head = l1;
        return head;
    }
}
