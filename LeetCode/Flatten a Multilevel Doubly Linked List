/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;

    public Node() {}

    public Node(int _val,Node _prev,Node _next,Node _child) {
        val = _val;
        prev = _prev;
        next = _next;
        child = _child;
    }
};
*/
class Solution {
    public Node flatten(Node head) {
        Stack<Node> st = new Stack<>();
        Node cur = head;
        if(head == null) return head;
        while(true){
            if(cur.child != null) {
                if(cur.next != null) st.push(cur.next);
                cur.next = cur.child;
                cur.child = null;
                cur.next.prev = cur;
            }
            if(cur.next != null) cur = cur.next;
            else break;
        }
        while(!st.isEmpty()){
            cur.next = st.pop();
            cur.next.prev = cur;
            cur = flatten(cur.next);
            while(cur.next != null){
                cur = cur.next;
            }
        }
        
        return head;
    }
}
